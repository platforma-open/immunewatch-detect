wf := import("@platforma-sdk/workflow-tengo:workflow")
assets := import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

prepareTsv := assets.importTemplate(":prepare-tsv")

mnzDryRunTpl := assets.importTemplate(":mnz-dry-run")
exportTpl := assets.importTemplate(":export")

queries := import(":queries")

wf.prepare(func(args) {
	if is_undefined(args.aaSeqCDR3Ref) {
		return {}
	}
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.addAnchor("main", args.aaSeqCDR3Ref)
	bundleBuilder.addSingle(queries.vHit, "vHit")
	bundleBuilder.addSingle(queries.jHit, "jHit")
	bundleBuilder.addSingle(queries.abundance, "abundance")
	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {
	if is_undefined(args.aaSeqCDR3Ref) {
		// mnzInfo := monetization.
		// 	builder("PRODUCT:UIRIKGJJYMXREJCJGKUHTWAMOSVESOOTXFDCZWRGARGHNWVM").
		// 	setDate(args.__mnzDate).
		// 	build()
		return {
			outputs: {
				mnzInfo: {} //mnzInfo
			},
			exports: {}
		}
	}
	columns := args.columns

	cdr3 := columns.getColumn(args.aaSeqCDR3Ref)
	vHit := columns.getColumn("vHit")
	jHit := columns.getColumn("jHit")
	abundance := columns.getColumn("abundance")

	targetOutputs := [{
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "immunewatch.com/detect/input-tsv",
			valueType: "File"
		},
		name: "files",
		path: ["file"]
	}]

	distiller := pSpec.createSpecDistiller([cdr3.spec, vHit.spec, jHit.spec, abundance.spec])
	files := pframes.processColumn(
		abundance,
		exportTpl,
		targetOutputs,
		{
			aggregate: [1],
			extra: {
				cdr3 : {data:cdr3.data, spec: distiller.distill(cdr3.spec)},
				vHit : {data:vHit.data, spec: distiller.distill(vHit.spec)},
				jHit : {data:jHit.data, spec: distiller.distill(jHit.spec)}
			},
			passDistilledAggregationSpec: true
		}
	)

	result := render.create(mnzDryRunTpl, {
		files: files.outputData("files"),
		__mnzDate: args.__mnzDate
	})

	return {
		outputs: {
			mnzInfo: result.output("mnzInfo")
		},
		exports: {}
	}
})
