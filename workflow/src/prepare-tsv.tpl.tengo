// "imw_detect"
json := import("json")
tpl := import("@platforma-sdk/workflow-tengo:tpl")
text := import("text")

sets := import("@platforma-sdk/workflow-tengo:sets")
assets:= import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
render := import("@platforma-sdk/workflow-tengo:render")
ll := import("@platforma-sdk/workflow-tengo:ll")
detectImport := import(":import")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

monetization := import("@platforma-sdk/workflow-tengo:exec.monetization")

exportTpl := assets.importTemplate(":export")
detectTpl := assets.importTemplate(":detect")
aggResultsTpl := assets.importTemplate(":agg-results")

slices := import("@platforma-sdk/workflow-tengo:slices")

tpl.defineOutputs(["mnzInfo", "logs", "nEpitopes", "imwColumns"])

tpl.body(func(args) {

	abundance := args.abundance
	cdr3 := args.cdr3
	vHit := args.vHit
	jHit := args.jHit

	targetOutputs := [{
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "immunewatch.com/detect/input-tsv",
			valueType: "File"
		},
		name: "files",
		path: ["file"]
	}]

	distiller := pSpec.createSpecDistiller([cdr3.spec, vHit.spec, jHit.spec, abundance.spec])
	files := pframes.processColumn(
		abundance,
		exportTpl,
		targetOutputs,
		{
			aggregate: [1],
			extra: {
				cdr3 : {data:cdr3.data, spec: distiller.distill(cdr3.spec)},
				vHit : {data:vHit.data, spec: distiller.distill(vHit.spec)},
				jHit : {data:jHit.data, spec: distiller.distill(jHit.spec)}
			},
			passDistilledAggregationSpec: true
		}
	)

	detectSpec := detectImport.spec(abundance.spec)

	targetOutputs = [{
		type: "Resource",
		name: "logs",
		spec: {
			kind: "PColumn",
			name: "pl7.app/log",
			valueType: "Log"
		}
	},
	{
		type: "Resource",
		name: "nEpitopes",
		spec: {
			kind: "PColumn",
			name: "pl7.app/nEpitopes",
			valueType: "Int"
		}
	},
	{
		type: "Resource",
		name: "detectTsv",
		spec: {
			kind: "PColumn",
			name: "pl7.app/detectTsv",
			valueType: "File"
		}
	}]

	result := pframes.processColumn(
		files.output("files"),
		detectTpl,
		targetOutputs,
		{
			extra: {
				/* pass parameters to detect */
			}
		}
	)

	aggregationOutputs := [ {
		type: "Xsv",
		xsvType: "tsv",
		settings: {
			axes: detectSpec.axes,
			columns: detectSpec.columns,
			storageFormat: "Binary",
			partitionKeyLength: 0
		},
		name: "imw_result",
		path: ["tsv"]
	} ]


	aggBySample := pframes.processColumn(
			result.output("detectTsv"),
			aggResultsTpl,
			aggregationOutputs,
			{
				aggregate: ["pl7.app/sampleId"],
				extra: {
					aggColumns: slices.map(detectSpec.columns, func(col) {
									return col.column
								})
				}
			}
		)

	imwColumns := aggBySample.xsvOutputFrame("imw_result")

	return {
		mnzInfo: {},
		logs: result.outputData("logs"),
		nEpitopes: result.outputData("nEpitopes"),
		imwColumns: imwColumns
	}
})
