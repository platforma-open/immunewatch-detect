maps := import("@platforma-sdk/workflow-tengo:maps")
slices := import("@platforma-sdk/workflow-tengo:slices")
text := import("text")

splitEpitopes := func(epitopes) {
	if is_undefined(epitopes) {
		return undefined
	}

	start := text.re_compile(`^\s+`)
	end := text.re_compile(`\s+$`)

	if epitopes == "" {
		return undefined
	}

	epitopes = start.replace(epitopes, "")
	epitopes = end.replace(epitopes, "")
	del := text.re_compile(`\s+`)
	result := del.split(epitopes)

	if len(result) == 0 {
		return undefined
	}

	slices.quickSortInPlace(result)

	return result
}

importSpec := func(blockId, abundanceSpec, epitopes) {
	scoreSpec := func(epitope) {
		return {
			column: epitope ? "Score (" + epitope + ")" : "Score",
			id: epitope ? "score-" + epitope : "score",
			allowNA: true,
			naRegex: "0.0",
			spec: {
				name: "immunewatch.com/detect/score",
				valueType: "Float",
				domain: maps.clone({
					"immunewatch.com/detect/runId": blockId,
					"immunewatch.com/detect/epitope": epitope
				}, { removeUndefs: true }),
				annotations: {
					"pl7.app/label": epitope ? "DETECT Score (" + epitope + ")" : "DETECT Score",
					"pl7.app/info": "Represents the binding score, which ranges from 0 (no binding) " +
						"to 1 (highest binding), indicating the likelihood of the TCR recognizing the " +
						"annotated epitope. For most purposes, when using the IMWdb as the database, " +
						"we recommend a score cut-off of 0.2 for determining reliable predictions.",
					"pl7.app/min": "0",
					"pl7.app/max": "1"
				}
			}
		}
	}

	referenceTcrs := func(epitope) {
		return {
			column: epitope ? "Reference TCRs (" + epitope + ")" : "Reference TCRs",
			id: epitope ? "ref-" + epitope : "ref",
			naRegex: "\\[\\]",
			allowNA: true,
			spec: {
				name: "immunewatch.com/detect/reference",
				valueType: "String",
				domain: maps.clone({
					"immunewatch.com/detect/runId": blockId,
					"immunewatch.com/detect/epitope": epitope
				}, { removeUndefs: true }),
				annotations: {
					"pl7.app/label": epitope ? "DETECT Reference TCRs (" + epitope + ")" : "DETECT Reference TCRs",
					"pl7.app/info": "TCRs that support the given epitope annotation, and come " +
						"together with the DOI of the publication where the TCR-Epitope pair " +
						"was reported"
				}
			}
		}
	}

	columns := []

	if is_undefined(epitopes) {
		columns += [ {
			column: "Epitope",
			id: "Epitope",
			allowNA: true,
			naRegex: "None",
			spec: {
				name: "immunewatch.com/epitope",
				valueType: "String",
				domain: {
					"immunewatch.com/detect/runId": blockId
				},
				annotations: {
					"pl7.app/label": "DETECT Epitope",
					"pl7.app/info": "The ImmuneWatch DETECT algorithm annotates the epitope " +
						"specificity of TCRs based on the likeliest epitope from " +
						"the provided database to be recognized by the TCR. If no " +
						"corresponding epitope is identified, the value will be 'None'."
				}
			}
		},
			scoreSpec(undefined),
			referenceTcrs(undefined),
			{
				column: "Antigen",
				id: "antigen",
				naRegex: "\\s*",
				allowNA: true,
				spec: {
					name: "immunewatch.com/detect/antigen",
					valueType: "String",
					domain: {
						"immunewatch.com/detect/runId": blockId
					},
					annotations: {
						"pl7.app/label": "DETECT Antigen"
					}
				}
			}, {
				column: "Species",
				id: "species",
				naRegex: "\\s*",
				allowNA: true,
				spec: {
					name: "immunewatch.com/detect/species",
					valueType: "String",
					domain: {
						"immunewatch.com/detect/runId": blockId
					},
					annotations: {
						"pl7.app/label": "DETECT Species"
					}
				}
			}, {
				column: "HLA",
				id: "hla",
				naRegex: "\\s*",
				allowNA: true,
				spec: {
					name: "immunewatch.com/detect/hla",
					valueType: "String",
					domain: {
						"immunewatch.com/detect/runId": blockId
					},
					annotations: {
						"pl7.app/label": "DETECT HLA"
					}
				}
			} ]
	} else {
		columns += slices.map(epitopes, func(epitope) {
			return scoreSpec(epitope)
		})
		columns += slices.map(epitopes, func(epitope) {
			return referenceTcrs(epitope)
		})
	}

	return {
		axes: [ {
			column: "clonotypeKey",
			spec: abundanceSpec.axesSpec[1]
		} ],
		columns: columns,
		storageFormat: "Binary",
		partitionKeyLength: 0
	}
}

export {
	splitEpitopes: splitEpitopes,
	importSpec: importSpec
}
