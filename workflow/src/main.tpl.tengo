// "imw_detect"
wf := import("@platforma-sdk/workflow-tengo:workflow")
assets:= import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
llPframes := import("@platforma-sdk/workflow-tengo:pframes.ll")
render := import("@platforma-sdk/workflow-tengo:render")
pUtil := import("@platforma-sdk/workflow-tengo:pframes.util")
detectImport := import(":import")

prepareTsv := assets.importTemplate(":prepare-tsv")
exportTpl := assets.importTemplate(":export")
detectTpl := assets.importTemplate(":detect")
ll := import("@platforma-sdk/workflow-tengo:ll")

wf.setPreRun(assets.importTemplate(":pre-run"))

queries := import(":queries")

wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.addAnchor("main", args.aaSeqCDR3Ref) 
	bundleBuilder.addSingle(queries.vHit, "vHit")
	bundleBuilder.addSingle(queries.jHit, "jHit")
	bundleBuilder.addSingle(queries.abundance, "abundance")
	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {

	columns := args.columns
	
	cdr3 := columns.getColumn(args.aaSeqCDR3Ref)
	vHit := columns.getColumn("vHit")
	jHit := columns.getColumn("jHit")
	abundance := columns.getColumn("abundance")

	result := render.create(prepareTsv, {
		cdr3 : cdr3,
		vHit : vHit,
		jHit : jHit,
		abundance : abundance,
		mnzDryRun: false,
		__mnzDate: args.__mnzDate
	})
	
	return {
		outputs: {
			logs: result.output("logs"),
			nEpitopes: result.output("nEpitopes")
		},

		exports: {
			pf: result.output("imwColumns")
		}
	}
})
