wf := import("@platforma-sdk/workflow-tengo:workflow")
assets:= import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
llPframes := import("@platforma-sdk/workflow-tengo:pframes.ll")
render := import("@platforma-sdk/workflow-tengo:render")
pUtil := import("@platforma-sdk/workflow-tengo:pframes.util")
ll := import("@platforma-sdk/workflow-tengo:ll")

detectFormat := import(":detect-format")

processTpl := assets.importTemplate(":process")

queries := import(":queries")

wf.setPreRun(assets.importTemplate(":pre-run"))

wf.body(func(args) {

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.addAnchor("main", args.aaSeqCDR3Ref)
	bundleBuilder.addSingle(queries.vHit, "vHit")
	bundleBuilder.addSingle(queries.jHit, "jHit")
	bundleBuilder.addSingle(queries.abundance, "abundance")

	columns := bundleBuilder.build()

	result := render.createEphemeral(processTpl, {
		columns: columns,
		mnzDryRun: false,
		params: {
			epitopes: detectFormat.splitEpitopes(args.epitopes)
		},
		blockId: wf.getBlockId(),
		__mnzDate: args.__mnzDate
	})

	return {
		outputs: {
			logs: result.output("logs"),
			nEpitopes: result.output("nEpitopes")
		},

		exports: {
			pf: result.output("imwColumns")
		}
	}
})
